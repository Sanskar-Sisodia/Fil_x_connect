package com.filxconnect.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.filxconnect.entity.User;
import com.filxconnect.service.UserService;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@RestController
@RequestMapping("/api/users")
@Tag(name = "User Management", description = "API for managing users")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @Operation(summary = "Create a new user", description = "Adds a new user to the system")
    @PostMapping
    public ResponseEntity<User> createUser(@RequestBody User user) {
        // The 'id' will be auto-generated by the database when saving the user.
        return ResponseEntity.ok(userService.createUser(user));
    }

    @Operation(summary = "Get all users", description = "Retrieves all registered users")
    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        return ResponseEntity.ok(userService.getAllUsers());
    }

    @Operation(summary = "Search users", description = "Queries the User DB")
    @GetMapping("/search/{query}")
    public ResponseEntity<List<User>> searchUsers(@PathVariable String query) {
        return ResponseEntity.ok(userService.searchUsers(query));
    }

    @Operation(summary = "Total Users", description = "Gives Total number of users")
    @GetMapping("/total")
    public ResponseEntity<Long> getNumberOfUsers() {
        return ResponseEntity.ok(userService.numberOfUsers());
    }
    
    @Operation(summary = "Total Active Users", description = "Gives Total number of Active users")
    @GetMapping("/total/active")
    public ResponseEntity<Long> getNumberOfActiveUsers() {
        return ResponseEntity.ok(userService.numberOfActiveUsers());
    }
    
    @Operation(summary = "Get user by ID", description = "Retrieves a user based on their ID")
    @GetMapping("/{id}")
    public ResponseEntity<Optional<User>> getUserById(@PathVariable UUID id) {
        return ResponseEntity.ok(userService.getUserById(id));
    }

    @Operation(summary = "Get user by Email", description = "Retrieves a user based on their Email")
    @GetMapping("/getByEmail/{email}")
    public ResponseEntity<Optional<User>> getUserById(@PathVariable String email) {
        return ResponseEntity.ok(userService.getUserByEmail(email));
    }

    @Operation(summary = "Update user", description = "Updates user details based on ID")
    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable UUID id, @RequestBody User userDetails) {
        User updatedUser = userService.updateUser(id, userDetails);
        return updatedUser != null ? ResponseEntity.ok(updatedUser) : ResponseEntity.notFound().build();
    }

    @Operation(summary = "Update Profile Pic", description = "Updates user profile pic based on ID")
    @PutMapping("/{id}/updatePic/{pic}")
    public ResponseEntity<User> updateProfilePic(@PathVariable UUID id, @PathVariable String pic) {
        User updatedUser = userService.updateProfilePicture(id,pic);
        return updatedUser != null ? ResponseEntity.ok(updatedUser) : ResponseEntity.notFound().build();
    }
    
    @Operation(summary = "Approve user", description = "Approves a user's registration.")
    @PutMapping("/approveUser/{id}")
    public ResponseEntity<User> approveUser(@PathVariable UUID id) {
        User approvedUser = userService.approveUser(id);
        return approvedUser != null ? ResponseEntity.ok(approvedUser) : ResponseEntity.notFound().build();
    }
    
    @Operation(summary = "Reject user", description = "Rejects a user's registration.")
    @PutMapping("/rejectUser/{id}")
    public ResponseEntity<User> rejectUser(@PathVariable UUID id) {
        User rejectedUser = userService.rejectUser(id);
        return rejectedUser != null ? ResponseEntity.ok(rejectedUser) : ResponseEntity.notFound().build();
    }

    @Operation(summary = "Delete user", description = "Removes a user from the system")
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable UUID id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }
}
